<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Risk Simulation Game for Software Engineering</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            text-align: left;
            margin-left: 20px;
        }
        input, button, select {
            margin: 5px;
        }
        input[readonly] {
            background-color: #e9e9e9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #dddddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
        #result {
            margin-top: 20px;
        }
        #gameStatus {
            margin-top: 20px;
            text-align: center;
        }
        .hidden {
            display: none;
        }
        .low {
            background-color: #c6efce;
        }
        .medium {
            background-color: #ffeb9c;
        }
        .high {
            background-color: #ffc7ce;
        }
        .critical {
            background-color: #ff0000;
            color: #ffffff;
        }
        .progress-bar {
            background-color: #f3f3f3;
            border-radius: 13px;
            padding: 3px;
            margin: 5px auto;
            width: 80%;
            display: flex;
            align-items: center;
        }
        .progress {
            background-color: #4caf50;
            height: 20px;
            border-radius: 10px;
        }
        #charts {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        #charts canvas {
            margin: 20px;
            max-width: 400px;
        }
        #responseExplanation {
            margin-top: 10px;
        }
        .progress-label {
            width: 200px;
            text-align: left;
            margin-left: 10px;
        }
        .progress-container {
            flex: 1;
        }
        .button-action {
            background-color: #4CAF50;
            color: black;
            font-weight: bold;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
        }
        .button-action:hover {
            background-color: #45a049;
        }
        .left-align {
            text-align: left;
        }
        .right-align {
            text-align: right;
        }
        #finalResult {
            text-align: left;
        }
        #finalResult img {
            max-width: 20%;
            height: auto;
            margin-top: 20px;
            margin-left: 0;
            display: inline-block;
        }
        #helpButton {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #008CBA;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
        }
        #helpButton:hover {
            background-color: #005f6a;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            border-radius: 10px;
            max-height: 80vh;
            overflow-y: auto;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }
    </style>
    <!-- Include Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Include SheetJS from CDN for Excel Export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body>
    <!-- Help Button -->
    <button id="helpButton">Help</button>

    <!-- Logo Image -->
    <img src="https://www.vamk.fi/wp-content/themes/design-by-buorre-child-vamk/img/vamk_logo_notext.svg" alt="VAMK Logo" style="max-width: 200px; margin: 0 auto 20px auto; display: block;">

    <h1>Risk Simulation Game for Software Engineering</h1>
    <p>In this interactive simulation, you take on the role of a project manager responsible for delivering a successful software project by identifying and managing potential risks. Your strategic decisions will determine the project's outcome. Created by Thomas Vikström (v.0.1 - 10.2.2025 19:00)</p>

    <!-- Project Setup -->
    <div id="setup">
        <h2>Project Setup</h2>
        <label for="projectName">Project Name:</label>
        <input type="text" id="projectName"><br>

        <!-- The budget here is in thousands (€k). The code later converts the input value to euros. -->
        <label for="projectBudget">Project Budget (in €k):</label>
        <input type="number" id="projectBudget" value="100" onchange="updateBaselineCost()"><br>

        <label for="projectDuration">Project Duration (months):</label>
        <input type="number" id="projectDuration" value="24" onchange="updateBaselineCost()"><br>

        <!-- Baseline Cost per Turn auto-calculated and displayed in €k -->
        <label for="baselineCost">Baseline Cost per Turn (in €k):</label>
        <input type="number" id="baselineCost" readonly><br>

        <label for="riskContingencyPercentage">Risk Contingency Budget (% of Total Budget):</label>
        <input type="number" id="riskContingencyPercentage" value="10"><br>

        <button class="button-action" onclick="startGame()">Start Game</button>
    </div>

    <!-- Game and Simulation Sections -->
    <div id="game" class="hidden">
        <h2>Add a Risk (Add at least 5 risks!)</h2>
        <label for="riskName">Risk Name:</label>
        <input type="text" id="riskName" placeholder="e.g., Requirement Creep"><br>

        <label for="riskType">Risk Type:</label>
        <select id="riskType">
            <option value="Technical">Technical</option>
            <option value="Operational">Operational</option>
            <option value="Security">Security</option>
            <option value="Scope">Scope</option>
            <option value="Management">Management</option>
        </select><br>

        <label for="likelihood">Likelihood (1-5):</label>
        <input type="number" id="likelihood" min="1" max="5" value="3"><br>

        <label for="impact">Impact (1-5):</label>
        <input type="number" id="impact" min="1" max="5" value="3"><br>

        <label for="minCost">Minimum Cost if Occurs (€):</label>
        <input type="number" id="minCost" value="5000"><br>

        <label for="costPercentage">Cost as % of Budget:</label>
        <input type="number" id="costPercentage" value="5"><br>

        <!-- New Field: Risk Response Description -->
        <label for="riskResponseDescription">Risk Response Description:</label>
        <input type="text" id="riskResponseDescription" placeholder="e.g., Implement agile practices to control scope"><br>

        <button class="button-action" onclick="addRisk()">Add Risk</button>

        <h2>Risk Register</h2>
        <!-- Button Container for Alignment -->
        <div style="display: flex; justify-content: space-between; margin-top: 10px;">
            <button class="button-action" onclick="proceedToSimulation()">Proceed to Simulation</button>
            <button class="button-action" onclick="exportRiskRegister()">Export to Excel</button>
        </div>
        <table id="riskTable">
            <tr>
                <th>Risk Name</th>
                <th>Type</th>
                <th>Likelihood</th>
                <th>Impact</th>
                <th>Min Cost (€)</th>
                <th>Cost (% of Budget)</th>
                <th>Risk Score</th>
                <th>Risk Level</th>
                <th>Risk Response Description</th>
            </tr>
        </table>
    </div>

    <div id="simulation" class="hidden">
        <h2>Simulation</h2>
        <p id="simulationInfo"></p>

        <div id="riskEvent" class="hidden">
            <h3>Risk Event Occurred!</h3>
            <div id="riskEventDescription"></div>
            <label for="riskResponse">Choose Your Response:</label>
            <select id="riskResponse">
                <option value="">--Select an Action--</option>
                <option value="Mitigate">Mitigate</option>
                <option value="Avoid">Avoid</option>
                <option value="Transfer">Transfer</option>
                <option value="Accept">Accept</option>
            </select><br>
            <div id="responseExplanation"></div>
            <button class="button-action" onclick="respondToRisk()">Respond</button>
        </div>

        <button id="nextTurnButton" class="button-action" onclick="nextTurn()">Next Turn</button>

        <h2>Project Status</h2>
        <div class="progress-bar">
            <span class="progress-label">Budget Remaining:</span>
            <div class="progress-container">
                <div id="budgetProgress" class="progress"></div>
            </div>
        </div>
        <div class="progress-bar">
            <span class="progress-label">Project Quality:</span>
            <div class="progress-container">
                <div id="qualityProgress" class="progress"></div>
            </div>
        </div>
        <div class="progress-bar">
            <span class="progress-label">Risk Contingency Remaining:</span>
            <div class="progress-container">
                <div id="riskContingencyProgress" class="progress"></div>
            </div>
        </div>
        <p id="projectStatus"></p>

        <div id="charts">
            <canvas id="budgetChart" width="400" height="200"></canvas>
            <canvas id="qualityChart" width="400" height="200"></canvas>
        </div>
    </div>

    <div id="gameStatus"></div>

    <!-- Final Project Result Section -->
    <div id="finalResult" class="hidden">
        <h2>Simulation Results</h2>
        <div id="finalProjectInfo"></div>
        <h3>Your Overall Score</h3>
        <p id="finalScore"></p>
        <button class="button-action" onclick="window.print()">Print Results</button>
    </div>

    <!-- Help Modal -->
    <div id="helpModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Risk Simulation Game Instructions - Software Engineering</h2>
            <p>Welcome to the <strong>Risk Simulation Game for Software Engineering</strong>! In this interactive simulation, you assume the role of a project manager responsible for delivering a successful software project by identifying and managing potential risks.</p>

            <h3>How It Works</h3>
            <ol>
                <li><strong>Project Setup</strong>:
                    <ul>
                        <li><strong>Project Name</strong>: Enter a unique name for your software project.</li>
                        <li><strong>Project Budget</strong>: Specify the total budget for your project in €k.</li>
                        <li><strong>Project Duration</strong>: Set the project duration in months.</li>
                        <li><strong>Risk Contingency Budget</strong>: Allocate a percentage of your total budget to handle unforeseen risks.</li>
                    </ul>
                </li>
                <li><strong>Adding Risks</strong>:
                    <ul>
                        <li><strong>Risk Details</strong>: Add at least five risks by providing:
                            <ul>
                                <li><strong>Risk Name</strong>: A descriptive name (e.g., "Requirement Creep").</li>
                                <li><strong>Risk Type</strong>: Categorize the risk (e.g., Technical, Operational, Security, Scope, Management).</li>
                                <li><strong>Likelihood</strong>: Rate the probability of occurrence (1-5).</li>
                                <li><strong>Impact</strong>: Assess the potential impact (1-5).</li>
                                <li><strong>Minimum Cost if Occurs (€)</strong>: Estimate the minimum cost if the risk materializes.</li>
                                <li><strong>Cost as % of Budget</strong>: Specify the cost impact as a percentage of the total budget.</li>
                                <li><strong>Risk Response Description</strong>: Describe your strategy to address the risk.</li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><strong>Simulation Turns</strong>:
                    <ul>
                        <li>The simulation advances in turns (each turn representing one month of the project).</li>
                        <li><strong>Baseline Costs</strong>: Each turn, a portion of your budget is deducted as the baseline cost.</li>
                        <li><strong>Risk Events</strong>: Random risk events may occur. When a risk occurs, choose a response:
                            <ul>
                                <li><strong>Mitigate</strong>: Reduce the risk's likelihood or impact.</li>
                                <li><strong>Avoid</strong>: Alter project plans to eliminate the risk.</li>
                                <li><strong>Transfer</strong>: Shift the risk to a third party (e.g., through outsourcing or insurance).</li>
                                <li><strong>Accept</strong>: Proceed without additional measures.</li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><strong>Project Status Tracking</strong>:
                    <ul>
                        <li><strong>Budget Remaining</strong>: Monitors your available funds.</li>
                        <li><strong>Project Quality</strong>: Reflects the overall quality of your software product.</li>
                        <li><strong>Risk Contingency Remaining</strong>: Shows the funds reserved for handling risks.</li>
                    </ul>
                </li>
                <li><strong>Scoring System</strong>:
                    <ul>
                        <li>Your final score is based on:
                            <ul>
                                <li>Budget Remaining (40%)</li>
                                <li>Project Quality (40%)</li>
                                <li>Risk Contingency Remaining (20%)</li>
                            </ul>
                        </li>
                        <li>A higher score indicates better risk management and overall project success.</li>
                    </ul>
                </li>
                <li><strong>Exporting Risk Register</strong>:
                    <ul>
                        <li>You can export your Risk Register to an Excel file at any time for further analysis.</li>
                    </ul>
                </li>
                <li><strong>Final Results</strong>:
                    <ul>
                        <li>At simulation end, you’ll receive a summary of your performance, including detailed metrics and an overall score.</li>
                    </ul>
                </li>
            </ol>
            <h3>Tips for Success</h3>
            <ul>
                <li><strong>Diversify Your Risk Responses</strong>: Not every risk is managed the same way—choose the response that best fits the situation.</li>
                <li><strong>Monitor Your Budget and Quality</strong>: Keep a close eye on your financial and quality metrics throughout the project.</li>
                <li><strong>Plan for the Unexpected</strong>: Allocate sufficient funds in your risk contingency to handle unforeseen challenges.</li>
            </ul>
            <p>Good luck managing your software project and refining your risk management skills!</p>
        </div>
    </div>

    <!-- JavaScript Code -->
    <script>
        // Variables for project and game state
        var project = {};
        var risks = [];
        var currentTurn = 0;
        var gameOver = false;

        var budgetData = [];
        var qualityData = [];
        var turnLabels = [];

        var budgetChart;
        var qualityChart;

        window.onload = function() {
            setDefaultProjectName();
            addRiskResponseListener();
            updateBaselineCost();
            setupHelpModal();
        };

        function setDefaultProjectName() {
            var projectNames = ["Turing", "Ada", "Grace", "Linus", "Jobs", "Gates", "Von Neumann", "Tesla", "Dijkstra", "Knuth"];
            var randomName = projectNames[Math.floor(Math.random() * projectNames.length)];
            var currentDate = new Date();
            var dateString = formatDate(currentDate);
            var timeString = formatTime(currentDate);
            var defaultProjectName = randomName + " " + dateString + " " + timeString;
            document.getElementById('projectName').value = defaultProjectName;
        }

        function formatDate(date) {
            var day = date.getDate();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();
            return day + "." + month + "." + year;
        }

        function formatTime(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            if (minutes < 10) minutes = '0' + minutes;
            return hours + ":" + minutes;
        }

        function updateBaselineCost() {
            // Convert project budget from €k to €
            var projectBudget = parseFloat(document.getElementById('projectBudget').value) * 1000;
            var projectDuration = parseInt(document.getElementById('projectDuration').value);
            if (isNaN(projectBudget) || isNaN(projectDuration) || projectDuration === 0) {
                document.getElementById('baselineCost').value = "";
                return;
            }
            // Calculate baseline cost per turn then convert back to €k for display
            var baselineCostPerTurn = (projectBudget / projectDuration) - (0.01 * projectBudget);
            baselineCostPerTurn = baselineCostPerTurn / 1000;
            document.getElementById('baselineCost').value = baselineCostPerTurn.toFixed(2);
        }

        function startGame() {
            var projectNameInput = document.getElementById('projectName').value;
            var projectBudget = parseFloat(document.getElementById('projectBudget').value) * 1000;
            var projectDuration = parseInt(document.getElementById('projectDuration').value);
            var baselineCostPerTurn = parseFloat(document.getElementById('baselineCost').value) * 1000;
            var riskContingencyPercentage = parseFloat(document.getElementById('riskContingencyPercentage').value);

            if (projectNameInput === "") {
                alert("Please enter a project name.");
                return;
            }

            if (isNaN(baselineCostPerTurn) || baselineCostPerTurn <= 0) {
                alert("Invalid Baseline Cost per Turn. Please check your Project Budget and Duration.");
                return;
            }

            // Cheat function activation (if project name is "tv")
            if (projectNameInput.trim().toLowerCase() === "tv") {
                var currentDate = new Date();
                var dateString = formatDate(currentDate);
                var timeString = formatTime(currentDate);
                projectNameInput += " " + dateString + " " + timeString;
                generateCheatRisks();
            }

            var riskContingencyBudget = (riskContingencyPercentage / 100) * projectBudget;

            project = {
                name: projectNameInput,
                budget: projectBudget,
                originalBudget: projectBudget,
                riskContingencyBudget: riskContingencyBudget,
                originalRiskContingencyBudget: riskContingencyBudget,
                baselineCostPerTurn: baselineCostPerTurn,
                duration: projectDuration,
                originalDuration: projectDuration,
                quality: 100
            };

            document.getElementById('setup').classList.add('hidden');
            document.getElementById('game').classList.remove('hidden');
            updateRiskTable();
        }

        function generateCheatRisks() {
            var cheatRisks = [
                {
                    name: "Requirement Creep",
                    type: "Scope",
                    likelihood: 4,
                    impact: 3,
                    minCost: 5000,
                    costPercentage: 5,
                    responseDescription: "Implement agile practices and regular backlog reviews to control scope."
                },
                {
                    name: "Technical Debt Accumulation",
                    type: "Technical",
                    likelihood: 3,
                    impact: 4,
                    minCost: 4000,
                    costPercentage: 4,
                    responseDescription: "Plan refactoring cycles and enforce code reviews to reduce technical debt."
                },
                {
                    name: "Integration Issues",
                    type: "Technical",
                    likelihood: 3,
                    impact: 3,
                    minCost: 3000,
                    costPercentage: 3,
                    responseDescription: "Conduct early prototyping and thorough integration testing."
                },
                {
                    name: "Security Vulnerability",
                    type: "Security",
                    likelihood: 2,
                    impact: 5,
                    minCost: 6000,
                    costPercentage: 6,
                    responseDescription: "Perform regular security audits and implement robust security measures."
                },
                {
                    name: "Team Turnover",
                    type: "Operational",
                    likelihood: 4,
                    impact: 2,
                    minCost: 2000,
                    costPercentage: 2,
                    responseDescription: "Enhance team retention through competitive incentives and a positive culture."
                }
            ];

            cheatRisks.forEach(function(riskData) {
                var riskScore = riskData.likelihood * riskData.impact;
                var riskLevel = getRiskLevel(riskScore);

                var risk = {
                    name: riskData.name,
                    type: riskData.type,
                    likelihood: riskData.likelihood,
                    impact: riskData.impact,
                    minCost: riskData.minCost,
                    costPercentage: riskData.costPercentage,
                    score: riskScore,
                    level: riskLevel,
                    occurred: false,
                    responseDescription: riskData.responseDescription
                };

                risks.push(risk);
            });
        }

        function addRisk() {
            var riskName = document.getElementById('riskName').value;
            var riskType = document.getElementById('riskType').value;
            var likelihood = parseInt(document.getElementById('likelihood').value);
            var impact = parseInt(document.getElementById('impact').value);
            var minCost = parseFloat(document.getElementById('minCost').value);
            var costPercentage = parseFloat(document.getElementById('costPercentage').value);
            var riskResponseDescription = document.getElementById('riskResponseDescription').value;

            if (riskName === "") {
                alert("Please enter a risk name.");
                return;
            }

            if (riskResponseDescription.trim() === "") {
                alert("Please enter a risk response description.");
                return;
            }

            var riskScore = likelihood * impact;
            var riskLevel = getRiskLevel(riskScore);

            var risk = {
                name: riskName,
                type: riskType,
                likelihood: likelihood,
                impact: impact,
                minCost: minCost,
                costPercentage: costPercentage,
                score: riskScore,
                level: riskLevel,
                occurred: false,
                responseDescription: riskResponseDescription
            };

            risks.push(risk);
            updateRiskTable();
            document.getElementById('riskName').value = "";
            document.getElementById('minCost').value = "5000";
            document.getElementById('costPercentage').value = "5";
            document.getElementById('riskResponseDescription').value = "";
        }

        function getRiskLevel(score) {
            if (score <= 4) return "Low";
            else if (score <= 9) return "Medium";
            else if (score <= 15) return "High";
            else return "Critical";
        }

        function updateRiskTable() {
            var table = document.getElementById('riskTable');
            table.innerHTML = `
                <tr>
                    <th>Risk Name</th>
                    <th>Type</th>
                    <th>Likelihood</th>
                    <th>Impact</th>
                    <th>Min Cost (€)</th>
                    <th>Cost (% of Budget)</th>
                    <th>Risk Score</th>
                    <th>Risk Level</th>
                    <th>Risk Response Description</th>
                </tr>
            `;

            risks.forEach(function(risk) {
                var row = table.insertRow();
                row.innerHTML = `
                    <td class="left-align">${risk.name}</td>
                    <td>${risk.type}</td>
                    <td>${risk.likelihood}</td>
                    <td>${risk.impact}</td>
                    <td class="right-align">${risk.minCost.toLocaleString()}</td>
                    <td>${risk.costPercentage}%</td>
                    <td>${risk.score}</td>
                    <td>${risk.level}</td>
                    <td class="left-align">${risk.responseDescription}</td>
                `;
                row.classList.add(getRiskLevelClass(risk.level));
            });
        }

        function getRiskLevelClass(level) {
            switch(level) {
                case "Low": return "low";
                case "Medium": return "medium";
                case "High": return "high";
                case "Critical": return "critical";
                default: return "";
            }
        }

        function proceedToSimulation() {
            if (risks.length < 5) {
                alert("Please add at least 5 risks before proceeding.");
                return;
            }

            document.getElementById('game').classList.add('hidden');
            document.getElementById('simulation').classList.remove('hidden');
            updateProjectStatus();
            document.getElementById('simulationInfo').innerText = `Managing Software Project: ${project.name}`;
            initializeCharts();
        }

        function nextTurn() {
            if (gameOver) return;

            currentTurn++;
            if (currentTurn > project.duration) {
                checkWinCondition();
                return;
            }

            project.budget -= project.baselineCostPerTurn;
            var riskEvent = checkForRiskEvent();
            if (riskEvent) {
                document.getElementById('riskEvent').classList.remove('hidden');
                document.getElementById('riskEventDescription').innerHTML = `
                    <p>Risk "<strong>${riskEvent.name}</strong>" has occurred!</p>
                    <p>Type: ${riskEvent.type}</p>
                    <p>Likelihood: ${riskEvent.likelihood}</p>
                    <p>Impact: ${riskEvent.impact}</p>
                    <p>Minimum Cost if Occurs: €${riskEvent.minCost.toLocaleString()}</p>
                    <p>Cost as % of Budget: ${riskEvent.costPercentage}%</p>
                    <p>Risk Response Description: ${riskEvent.responseDescription}</p>
                `;
                document.getElementById('nextTurnButton').disabled = true;
                currentRiskEvent = riskEvent;
            } else {
                updateProjectStatus();
                updateCharts();
                checkWinCondition();
            }
        }

        var currentRiskEvent = null;

        function checkForRiskEvent() {
            var shuffledRisks = risks.slice().sort(() => 0.5 - Math.random());
            for (var i = 0; i < shuffledRisks.length; i++) {
                var risk = shuffledRisks[i];
                if (!risk.occurred) {
                    var probability = risk.likelihood / 5;
                    if (Math.random() < probability) {
                        risk.occurred = true;
                        return risk;
                    }
                }
            }
            return null;
        }

        function respondToRisk() {
            var response = document.getElementById('riskResponse').value;
            if (response === "") {
                alert("Please select a risk response action.");
                return;
            }

            var costFromMin = currentRiskEvent.minCost;
            var costFromPercentage = (currentRiskEvent.costPercentage / 100) * project.originalBudget;
            var costImpact = Math.max(costFromMin, costFromPercentage);

            switch (response) {
                case "Mitigate":
                    costImpact *= 0.5;
                    break;
                case "Avoid":
                    costImpact *= 0.75;
                    break;
                case "Transfer":
                    costImpact *= 0.25;
                    break;
                case "Accept":
                    break;
            }

            if (project.riskContingencyBudget >= costImpact) {
                project.riskContingencyBudget -= costImpact;
            } else {
                var remainingCost = costImpact - project.riskContingencyBudget;
                project.riskContingencyBudget = 0;
                project.budget -= remainingCost;
            }

            var timeImpact = currentRiskEvent.impact * 0.02 * project.originalDuration;
            switch (response) {
                case "Mitigate":
                    project.duration += timeImpact * 0.5;
                    break;
                case "Avoid":
                    project.duration += timeImpact * 0.75;
                    break;
                case "Transfer":
                    project.duration += timeImpact * 0.25;
                    break;
                case "Accept":
                    project.duration += timeImpact;
                    break;
            }

            project.quality -= currentRiskEvent.impact * 2;

            document.getElementById('riskEvent').classList.add('hidden');
            document.getElementById('nextTurnButton').disabled = false;
            updateProjectStatus();
            updateCharts();
            checkWinCondition();
        }

        function updateProjectStatus() {
            var budgetPercent = (project.budget / project.originalBudget) * 100;
            var qualityPercent = project.quality;
            var riskContingencyPercent = (project.riskContingencyBudget / project.originalRiskContingencyBudget) * 100;

            document.getElementById('budgetProgress').style.width = budgetPercent + '%';
            document.getElementById('qualityProgress').style.width = qualityPercent + '%';
            document.getElementById('riskContingencyProgress').style.width = riskContingencyPercent + '%';

            var timeRemaining = Math.max(project.duration - currentTurn, 0);
            timeRemaining = timeRemaining.toFixed(1);

            var status = `
                <p>Turn: ${currentTurn} / ${project.originalDuration}</p>
                <p>Budget Remaining: €${project.budget.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>
                <p>Risk Contingency Remaining: €${project.riskContingencyBudget.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>
                <p>Time Remaining: ${timeRemaining} months</p>
                <p>Quality: ${project.quality}%</p>
            `;
            document.getElementById('projectStatus').innerHTML = status;

            if (project.budget <= 0 || project.quality <= 0) {
                gameOver = true;
                finalizeGame(false);
            }
        }

        function checkWinCondition() {
            if (currentTurn >= project.duration) {
                if (project.budget > 0 && project.quality > 50) {
                    finalizeGame(true);
                } else {
                    finalizeGame(false);
                }
            }
        }

        function finalizeGame(isSuccess) {
            document.getElementById('simulation').classList.add('hidden');

            let finalScore = calculateFinalScore();

            let budgetRemaining = (project.budget / project.originalBudget) * 100;
            let riskContingencyRemaining = (project.riskContingencyBudget / project.originalRiskContingencyBudget) * 100;
            let finalInfo = `
                <p><strong>Final Budget Remaining:</strong> €${project.budget.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} (${budgetRemaining.toFixed(2)}%)</p>
                <p><strong>Final Risk Contingency Remaining:</strong> €${project.riskContingencyBudget.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} (${riskContingencyRemaining.toFixed(2)}%)</p>
                <p><strong>Final Quality Percentage:</strong> ${project.quality}%</p>
            `;

            let message;
            if (isSuccess) {
                message = `
                    <h2>Congratulations! Project Completed Successfully</h2>
                    <p>You delivered the software project on budget and maintained high quality.</p>
                    <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExYnd2d3lrZGhxbm5zZDdkYmI1Zng5Y2VjZGdjYW02dHc3eDdiaHk5cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/hcnh1VGMNW3Sb8c5aX/giphy.gif" alt="Success GIF">
                `;
            } else {
                var failureReason = '';
                if (project.budget <= 0 && project.quality <= 50) {
                    failureReason = 'Your project ran out of budget and quality fell below acceptable levels.';
                } else if (project.budget <= 0) {
                    failureReason = 'Your project ran out of budget before completion.';
                } else if (project.quality <= 50) {
                    failureReason = 'Your project quality was too low.';
                } else {
                    failureReason = 'Your project could not be completed successfully.';
                }

                message = `
                    <h2>Game Over: Project Failed</h2>
                    <p>${failureReason}</p>
                    <img src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExcnRqcmNzZGhoc2ZidGs5bWN2MWI0MXVucjVqcWozM294a3Vid3NvNSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/BGlGy3pD9THOFVzdtf/giphy.gif" alt="Failure GIF">
                `;
            }

            document.getElementById('finalResult').innerHTML = `
                <h2>Simulation Results</h2>
                ${finalInfo}
                <h3>Your Overall Score</h3>
                <p><strong>${finalScore}%</strong></p>
                ${message}
                <button class="button-action" onclick="window.print()">Print Results</button>
            `;
            document.getElementById('finalResult').classList.remove('hidden');
        }

        function calculateFinalScore() {
            let budgetRemaining = (project.budget / project.originalBudget) * 100;
            let riskContingencyRemaining = (project.riskContingencyBudget / project.originalRiskContingencyBudget) * 100;
            let qualityRemaining = project.quality;

            let score = (budgetRemaining * 0.4) + (qualityRemaining * 0.4) + (riskContingencyRemaining * 0.2);
            return Math.min(score.toFixed(2), 100);
        }

        function initializeCharts() {
            turnLabels.push("0");
            budgetData.push(project.budget);
            qualityData.push(project.quality);

            var ctxBudget = document.getElementById('budgetChart').getContext('2d');
            budgetChart = new Chart(ctxBudget, {
                type: 'line',
                data: {
                    labels: turnLabels,
                    datasets: [{
                        label: 'Budget Remaining (€)',
                        data: budgetData,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        fill: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: { display: true, title: { display: true, text: 'Turn' } },
                        y: { display: true, title: { display: true, text: 'Budget (€)' }, beginAtZero: true }
                    }
                }
            });

            var ctxQuality = document.getElementById('qualityChart').getContext('2d');
            qualityChart = new Chart(ctxQuality, {
                type: 'line',
                data: {
                    labels: turnLabels,
                    datasets: [{
                        label: 'Project Quality (%)',
                        data: qualityData,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        fill: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: { display: true, title: { display: true, text: 'Turn' } },
                        y: { display: true, title: { display: true, text: 'Quality (%)' }, min: 0, max: 100 }
                    }
                }
            });
        }

        function updateCharts() {
            turnLabels.push(currentTurn.toString());
            budgetData.push(project.budget);
            qualityData.push(project.quality);
            budgetChart.update();
            qualityChart.update();
        }

        function addRiskResponseListener() {
            var riskResponseSelect = document.getElementById('riskResponse');
            riskResponseSelect.addEventListener('change', function() {
                var response = riskResponseSelect.value;
                var explanationDiv = document.getElementById('responseExplanation');
                var explanation = getResponseExplanation(response);
                explanationDiv.innerHTML = explanation;
            });
        }

        function getResponseExplanation(response) {
            switch(response) {
                case "Mitigate":
                    return `
                        <strong>Mitigate:</strong> Take actions to reduce the likelihood or impact of the risk.<br>
                        <em>Example:</em> Implement code reviews and refactoring sessions.
                    `;
                case "Avoid":
                    return `
                        <strong>Avoid:</strong> Change plans to eliminate the risk entirely.<br>
                        <em>Example:</em> Modify project scope to exclude high-risk features.
                    `;
                case "Transfer":
                    return `
                        <strong>Transfer:</strong> Shift the risk to a third party, such as outsourcing or insurance.<br>
                        <em>Example:</em> Outsource non-core functionalities to mitigate risk.
                    `;
                case "Accept":
                    return `
                        <strong>Accept:</strong> Acknowledge the risk and decide to manage it if it occurs.<br>
                        <em>Example:</em> Proceed without additional measures for minor risks.
                    `;
                default:
                    return "";
            }
        }

        function exportRiskRegister() {
            if (risks.length === 0) {
                alert("No risks to export.");
                return;
            }

            var ws_data = [
                ["Risk Name", "Type", "Likelihood", "Impact", "Min Cost (€)", "Cost (% of Budget)", "Risk Score", "Risk Level", "Risk Response Description"]
            ];

            risks.forEach(function(risk) {
                ws_data.push([
                    risk.name,
                    risk.type,
                    risk.likelihood,
                    risk.impact,
                    risk.minCost,
                    risk.costPercentage + "%",
                    risk.score,
                    risk.level,
                    risk.responseDescription
                ]);
            });

            var ws = XLSX.utils.aoa_to_sheet(ws_data);
            var wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Risk Register");
            var timestamp = new Date().toISOString().slice(0,19).replace(/[:T]/g, "-");
            XLSX.writeFile(wb, "risk_register_" + timestamp + ".xlsx");
        }

        function setupHelpModal() {
            var modal = document.getElementById('helpModal');
            var btn = document.getElementById('helpButton');
            var span = document.getElementsByClassName('close')[0];

            btn.onclick = function() {
                modal.style.display = "block";
            }

            span.onclick = function() {
                modal.style.display = "none";
            }

            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }
        }
    </script>
</body>
</html>
